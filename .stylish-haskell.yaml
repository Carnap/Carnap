# See https://github.com/jaspervdj/stylish-haskell/blob/main/data/stylish-haskell.yaml
# for reference.

steps:
  # - unicode_syntax:
  #     add_language_pragma: true

  # - module_header:
  #     indent: 4
  #     sort: true
  #     separate_lists: true

  # Format record definitions. This is disabled by default.
  #
  # You can control the layout of record fields. The only rules that can't be configured
  # are these:
  #
  # - "|" is always aligned with "="
  # - "," in fields is always aligned with "{"
  # - "}" is likewise always aligned with "{"
  #
  # - records:
  #     # How to format equals sign between type constructor and data constructor.
  #     # Possible values:
  #     # - "same_line" -- leave "=" AND data constructor on the same line as the type constructor.
  #     # - "indent N" -- insert a new line and N spaces from the beginning of the next line.
  #     equals: "indent 2"
  #
  #     # How to format first field of each record constructor.
  #     # Possible values:
  #     # - "same_line" -- "{" and first field goes on the same line as the data constructor.
  #     # - "indent N" -- insert a new line and N spaces from the beginning of the data constructor
  #     first_field: "indent 2"
  #
  #     # How many spaces to insert between the column with "," and the beginning of the comment in the next line.
  #     field_comment: 2
  #
  #     # How many spaces to insert before "deriving" clause. Deriving clauses are always on separate lines.
  #     deriving: 2
  #
  #     # How many spaces to insert before "via" clause counted from indentation of deriving clause
  #     # Possible values:
  #     # - "same_line" -- "via" part goes on the same line as "deriving" keyword.
  #     # - "indent N" -- insert a new line and N spaces from the beginning of "deriving" keyword.
  #     via: "indent 2"
  #
  #     # Sort typeclass names in the "deriving" list alphabetically.
  #     sort_deriving: true
  #
  #     # Wheter or not to break enums onto several lines
  #     #
  #     # Default: false
  #     break_enums: false
  #
  #     # Whether or not to break single constructor data types before `=` sign
  #     #
  #     # Default: true
  #     break_single_constructors: true
  #
  #     # Whether or not to curry constraints on function.
  #     #
  #     # E.g: @allValues :: Enum a => Bounded a => Proxy a -> [a]@
  #     #
  #     # Instead of @allValues :: (Enum a, Bounded a) => Proxy a -> [a]@
  #     #
  #     # Default: false
  #     curried_context: false

  - simple_align:
      cases: true
      top_level_patterns: true
      records: true
      multi_way_if: true

  - imports:
      align: global
      list_align: after_alias
      pad_module_names: true
      long_list_align: inline
      empty_list_align: inherit
      list_padding: 4
      separate_lists: true
      space_surround: false
      ghc_lib_parser: false

  - language_pragmas:
      style: vertical
      align: true
      remove_redundant: true
      language_prefix: LANGUAGE

  # - tabs:
  #     spaces: 8

  - trailing_whitespace: {}

  # - squash: {}

columns: 80

newline: native

language_extensions:
  - TemplateHaskell
  - QuasiQuotes
  - OverloadedStrings
  - NoImplicitPrelude
  - MultiParamTypeClasses
  - TypeFamilies
  - GADTs
  - GeneralizedNewtypeDeriving
  - FlexibleContexts
  - FlexibleInstances
  - EmptyDataDecls
  - NoMonomorphismRestriction
  - RankNTypes
  - DeriveDataTypeable
  - ViewPatterns
  - TupleSections
  - RecordWildCards

cabal: true
