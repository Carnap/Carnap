function submitAddInstructor(elt,cid) {
    var form = elt.form
    $(form).children("input[name=f1]").val(cid);
    form.submit()
    }

function tryDeleteAssignment (json,fn,ct) {
    if (confirm("Are you sure you want to delete the assignment " + fn + ", and all submitted problems from this assignment?")) {
        deleteAssignment(json,fn,ct);
        }
    }

function tryDeleteDocument (json) {
    var fn = JSON.parse(json).contents;
    if (confirm("Are you sure you want to permanently delete the document" + fn + "?")) {
        deleteDocument(json,fn);
        }
    }

function tryDeleteCoInstructor (json, ln, fn) {
    if (confirm("Are you sure you want to remove Co-Instructor " + fn + " " + ln + "? This will permanently delete all assignments for this course created by this co-instructor, and all student work submitted for those assignments")) {
        deleteCoInstructor(json, ln, fn);
        }
    }

function tryDeleteCourse (json) {
    var cn = JSON.parse(json).contents;
    if (confirm("Are you sure you want to permanently delete the course " + cn 
        + "? This will unenroll all students, and delete all associated data, including assignments attached to the course.")) {
        deleteCourse(json,cn);
        }
    }

function tryDropStudent (json) {
    var cn = JSON.parse(json).contents;
    if (confirm("Are you sure you want to drop this student?")) {
        dropStudent(json,cn);
        }
    }

function modalEditAssignment (id,due,visfrom,vistill,release,desc,pass,hide,min) {
    jQuery.noConflict()
    $("#updateAssignment")[0].reset();
    $("#updateAssignment input[name=f1]").val(id);
    var dparts = due.split(" ")
    var fparts = visfrom.split(" ")
    var tparts = vistill.split(" ")
    var rparts = release.split(" ")
    if (dparts.length > 1) {
        $("#updateAssignment input[name=f2]").val(dparts[0]);
        $("#updateAssignment input[name=f3]").val(dparts[1]);
        };
    if (fparts.length > 1) {
        $("#updateAssignment input[name=f4]").val(fparts[0]);
        $("#updateAssignment input[name=f5]").val(fparts[1]);
        };
    if (tparts.length > 1) {
        $("#updateAssignment input[name=f6]").val(tparts[0]);
        $("#updateAssignment input[name=f7]").val(tparts[1]);
        };
    if (rparts.length > 1) {
        $("#updateAssignment input[name=f8]").val(rparts[0]);
        $("#updateAssignment input[name=f9]").val(rparts[1]);
        };
    $("#updateAssignment textarea[name=f10]").val(desc);
    $("#updateAssignment input[name=f11]").val(pass);
    $("#updateAssignment input[name=f12]").prop("checked", hide == "True");
    $("#updateAssignment input[name=f13]").val(min)
    $("#updateAssignmentData").modal({show:true});
}

function modalEditDocument (id,desc,title,tags) {
    jQuery.noConflict()
    $("#updateDocument")[0].reset();
    $('#updateDocumentLabel').html("Update " + title);
    $("#updateDocument")[0].focusedDocument = title;
    $("#updateDocument input[name=f1]").val(id);
    $("#updateDocument textarea[name=f3]").val(desc)
    $("#updateDocument input[name=f5]").tagsinput("removeAll");
    $("#updateDocument input[name=f5]").tagsinput("add",tags);
    $("#updateDocumentData").modal({show:true});
}

function modalEditCourse (id,desc,start,end,points,isopen) {
    jQuery.noConflict()
    $("#updateCourse")[0].reset();
    var sparts = start.split(" ")
    var eparts = end.split(" ")
    $("#updateCourse input[name=f1]").val(id);
    $("#updateCourse textarea[name=f2]").val(desc);
    if (sparts.length > 0) {$("#updateCourse input[name=f3]").val(sparts[0]);}
    if (eparts.length > 0) {$("#updateCourse input[name=f4]").val(eparts[0]);}
    $("#updateCourse input[name=f5]").val(points);
    $("#updateCourse input[name=f6]").prop("checked",isopen);
    $("#updateCourseData").modal({show:true});
}

function modalEditAccommodation (cid,uid,json) {
    jQuery.noConflict()
    $("#updateAccommodation")[0].reset();
    $("#updateAccommodation input[name=f1]").val(cid);
    $("#updateAccommodation input[name=f2]").val(uid);
    $("#updateAccommodation input[name=f3]").prop('disabled',true);
    $("#updateAccommodation input[name=f4]").prop('disabled',true);
    $("#updateAccommodation input[name=f5]").prop('disabled',true);
    jQuery.ajax({
        url: '@{InstructorQueryR ident}',
        type: 'POST',
        contentType: "application/json",
        data: json,
        success: function(data) {
            $("#updateAccommodation input[name=f3]").val(data[0]);
            $("#updateAccommodation input[name=f4]").val(data[1]);
            $("#updateAccommodation input[name=f5]").val(data[2]);
            $("#updateAccommodation input[name=f3]").prop('disabled',false);
            $("#updateAccommodation input[name=f4]").prop('disabled',false);
            $("#updateAccommodation input[name=f5]").prop('disabled',false);
            },
        error: function(data) {
            console.log("error, couldn't retrieve accessibility data")
            },
        });
    $("#updateAccommodationData").modal({show:true});
}

function deleteCoInstructor (json,ln,fn) {
    jQuery.ajax({
        url: '@{InstructorR ident}',
        type: 'DELETE',
        contentType: "application/json",
        data: json,
        success: function(data) {
            var el = $("#Co-Instructor-" + $.escapeSelector(ln) + "-" + $.escapeSelector(fn));
            el.remove();
            window.alert("Removed Co-Instructor " + fn + " " + ln);
            },
        error: function(data) {
            window.alert("Error, couldn't remove co-instructor " + fn + " " + ln)
            },
        });
    };

function queryGrade (json, callback) {
    jQuery.ajax({
        url: '@{InstructorQueryR ident}',
        type: 'POST',
        contentType: "application/json",
        data: json,
        success: callback,
        error: function(data) {
            console.log("error, couldn't retrieve grade")
            },
        });
    };

function deleteAssignment (json,fn,ct) {
    jQuery.ajax({
        url: '@{InstructorR ident}',
        type: 'DELETE',
        contentType: "application/json",
        data: json,
        success: function(data) {
            var el = $("#assignment-" + $.escapeSelector(ct) + "-" + $.escapeSelector(fn));
            el.remove();
            window.alert("Deleted the assignment " + fn);
            },
        error: function(data) {
            window.alert("Error, couldn't delete the assignment " + fn)
            },
        });
    };

function deleteDocument (json,fn) {
    jQuery.ajax({
        url: '@{InstructorR ident}',
        type: 'DELETE',
        contentType: "application/json",
        data: json,
        success: function(data) {
            var el = $("#document-" + $.escapeSelector(fn));
            el.remove();
            window.alert("Deleted the assignment " + fn);
            },
        error: function(data) {
            window.alert("Error, couldn't delete the assignment " + fn)
            },
        });
    };

function dropStudent (json,sident) {
    jQuery.ajax({
        url: '@{InstructorR ident}',
        type: 'DELETE',
        contentType: "application/json",
        data: json,
        success: function(data) {
            var el = $("#student-" + $.escapeSelector(sident));
            el.remove();
            },
        error: function(data) {
            window.alert("Error, couldn't drop the student " + sident)
            },
        });
    };

function deleteCourse (json,cn) {
    var tag = cn.replace(/ /g,'_')
    jQuery.ajax({
        url: '@{InstructorR ident}',
        type: 'DELETE',
        contentType: "application/json",
        data: json,
        success: function(data) {
            var el1 = $("#nav-to-course-" + $.escapeSelector(tag));
            var el2 = $("#course-" + $.escapeSelector(tag));
            el1.remove();
            el2.remove();
            window.alert("Deleted the course " + cn);
            },
        error: function(data) {
            window.alert("Error, couldn't delete the course " + cn)
            },
        });
    };


function deleteProblemSet (json) {
    var cnts = JSON.parse(json).contents;
    var pn = cnts[1]
    var course = cnts[0]
    jQuery.ajax({
        url: '@{InstructorR ident}',
        type: 'DELETE',
        contentType: "application/json",
        data: json,
        success: function(data) {
            var el = $("#problem-set-" + $.escapeSelector(course) + "-" + pn.toString());
            el.remove();
            window.alert("Deleted problem set " + pn.toString());
            },
        error: function(data) {
            window.alert("Error, couldn't delete problem set " + pn.toString())
            },
        });
    };

$("#updateAssignment").submit(function(e) {
    jQuery.ajax({
        url: '@{InstructorR ident}',
        type: 'PUT',
        data: new FormData(this),
        processData: false,
        contentType: false,
        success: function(data) {
            $("#updateAssignmentData").modal('hide');
            location.reload()
            },
        error: function(data) {
            window.alert("Error, couldn't update the assignment ")
            },
        });
    e.preventDefault();
})

$("#updateCourse").submit(function(e) {
    jQuery.ajax({
        url: '@{InstructorR ident}',
        type: 'PUT',
        data: new FormData(this),
        processData: false,
        contentType: false,
        success: function(data) {
            $("#updateCourseData").modal('hide');
            location.reload() /* lazy. Fix eventually. */
            },
        error: function(data) {
            window.alert("Error, couldn't update the course")
            },
        });
    e.preventDefault();
})

$("#updateAccommodation").submit(function(e) {
    jQuery.ajax({
        url: '@{InstructorR ident}',
        type: 'PUT',
        data: new FormData(this),
        processData: false,
        contentType: false,
        success: function(data) { 
            $("#updateAccommodationData").modal('hide'); 
            },
        error: function(data) {
            window.alert("Error, couldn't update the accomodation")
            },
        });
    e.preventDefault();
})

$("#updateDocument").submit(function(e) {
    if ($("#updateDocument input[name=f4]")[0].files.length > 0 
        && $("#updateDocument")[0].focusedDocument) {
        let focus = $("#updateDocument")[0].focusedDocument
        let upload = $("#updateDocument input[name=f4]")[0].files[0].name
        if (focus != upload 
            && !confirm("Really upload? You're replacing the contents of the file " + focus + " with the contents of " + upload + ".")) {
            return 
        }
    }
    jQuery.ajax({
        url: '@{InstructorR ident}',
        type: 'PUT',
        data: new FormData(this),
        processData: false,
        contentType: false,
        success: function(data) {
            $("#updateDocumentData").modal('hide');
            location.reload()
            },
        error: function(data) {
            window.alert("Error, couldn't update the course")
            },
        });
    e.preventDefault();
})

function consolidateScores (scores) {
    let consolidated = {}
    for (const score of scores) {
        let label
        if (score[0].Left) {
            label = assignmentLookup[score[0].Left].title
        } else {
            label = "Problem Set " + score[0].Right
        }
        consolidated[label] = (consolidated[label] + score[1]) || score[1]
    }
    return consolidated
}

async function exportGrades(cid) {
    let box = $("*[data-cid='" + cid + "']")[0]
    let loaded = new Promise(res => box.loadAll(res))
    await loaded
    let pcolumns = problemLookup[cid].sort((x,y) => x[1] > y[1])
                                     .map(x => "Problem Set " + x[0]) || []
    let acolumns = Object.values(assignmentLookup).sort((x,y) => x.date > y.date)
                        .filter(x => x.cid == cid)
                        .map(x => x.title)
    columns = pcolumns.concat(acolumns)
    let rows = []
    for (const k in box.contents) {
        let scores = consolidateScores(box.contents[k].scores)
        let row = box.contents[k]
        let newRow = columns.map(column => {
            if (scores[column]) {
                return scores[column]
            } else { 
                return 0 
            }})
            /* quote-enclose and escape contained quotes, CSV specification */
        function tidy (s) { return s.replace(/"/g,'""').replace(/^ */,"").replace(/ *$/,"") }
        newRow.unshift('"' + tidy(row.fn) + '"')
        newRow.unshift('"' + tidy(row.ln) + '"')
        newRow.unshift('"' + tidy(row.email) + '"')
        newRow.push(Object.values(scores).reduce((x,y) => x + y, 0))
        rows.push(newRow)
    }
    rows.sort((x,y) => x[0] > y[0])
    columns.unshift("First Name")
    columns.unshift("Last Name")
    columns.unshift("Email Address")
    columns.push("Total Score")
    columns = columns.map(v => '"' + v.replace(/"/g,'""') + '"')
    rows.unshift(columns)
    let csv = rows.map(row => row.reduce((x,y) => x + "," + y))
                  .reduce((x,y) => x + "\n" + y)
    let file = new Blob([csv], {type: "text/csv"})
    if (window.navigator.msSaveOrOpenBlob) { // IE10+ 
        window.navigator.msSaveOrOpenBlob(file, "grades.csv");
    } else { // Others
        let a = document.createElement("a")
        let url = URL.createObjectURL(file)
        a.href = url
        a.download = "grades.csv"
        document.body.appendChild(a)
        a.click()
        setTimeout(function() {
            document.body.removeChild(a)
            window.URL.revokeObjectURL(url)
        }, 0); 
    }

}

$(".scrollbox").each((_,elt) => elt.contents = {})

$(".scrollbox").each((_,box) => box.loadAll = async function(done) {
    for (const elt of this.querySelectorAll(".async")) 
        if (!box.contents[elt.dataset.uid]) {
            timer = new Promise(res => setTimeout(_ => elt.update(res),250))
            await timer
        }
    done()
})

$(".scrollbox > table").timeout = false

var assignmentLookup = (function() {
    let table = {}
    JSON.parse(#{jsonSerialize assignmentLookup}).forEach(entry => {
        table[entry[0]] = {}
        table[entry[0]].title = entry[1]
        table[entry[0]].date = entry[2]
        table[entry[0]].cid = entry[3]
    })
    return table
})()

var problemLookup = (function() {
    let table = {}
    JSON.parse(#{jsonSerialize problemSetLookup}).forEach(entry => {
        table[entry[0]] = entry[1]
    })
return table
})()

function scrollHandler (e) {
    let scrollbox = e.target
    clearTimeout(scrollbox.scrollTimeout);
    scrollbox.scrollTimeout = setTimeout(() => {
        let tableTop = $(scrollbox).offset().top
        let tableBottom = tableTop + $(scrollbox).innerHeight()
        document.querySelectorAll(".async").forEach( 
        function (el) { 
            let isAbove = $(el).offset().top < tableBottom; 
            let isBelow = $(el).offset().top + $(el).outerHeight() > tableTop;
            if (isBelow && isAbove) el.update();
        });
    },500)
};

$(document).ready(function(){
    try {$(document.getElementById(location.hash.substring(1) + "-tab"))[0].click();}
    catch {}
});

$("a[data-toggle='tab']").click(function(){
    let url = this.href
    window.location.hash = url.substring(url.indexOf('#'))
    $(".scrollbox").trigger("scroll")
})

$(".async").each((_,elt) => elt.update = function (callback) {
    let box = $(this).closest(".scrollbox")[0]
    this.innerHTML = "loading..."
    if (!box.contents[this.dataset.uid]) {queryGrade(this.dataset.query,(data) => {
        box.contents[this.dataset.uid] = {
            scores: data, 
            fn: this.dataset.fn,
            ln: this.dataset.ln,
            email: this.dataset.email,
        }
        this.innerHTML = data.map(i=>i[1]).reduce((x,y) => x + y, 0);
        document.getElementById("loaded-" + box.dataset.cid).innerHTML = Object.keys(box.contents).length
        if (callback) callback()
    })} else {
        let data = box.contents[elt.dataset.uid].scores
        this.innerHTML = data.map(i=>i[1]).reduce((x,y) => x + y, 0);
        if (callback) callback()
    };
    this.update = (newcallback) => { if (newcallback) { newcallback() } }
});

$("textarea").addClass("form-control")

$(".scrollbox").scroll(scrollHandler);

$(".scrollbox").trigger("scroll")
