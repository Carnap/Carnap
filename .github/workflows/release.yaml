name: build client js for download
on:
  push:
    tags:
      - 'v*'
jobs:
  build:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - uses: cachix/install-nix-action@v12
      with:
        nix_path: nixpkgs=channel:nixos-unstable
    - uses: cachix/cachix-action@v8
      with:
        name: carnap
        # skip pushing to cachix if this is NOT a push to a branch (i.e. it is a PR)
        skipPush: ${{ github.event_name != 'push' }}
        signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'

    - name: check if an alternate cachix is configured
      id: alt_cachix
      run: echo '::set-output name=alt_cachix::${{ secrets.ALT_CACHIX }}'

      # use a second cachix if provided
    - uses: cachix/cachix-action@v8
      if: '${{ steps.alt_cachix.outputs.alt_cachix }}'
      with:
        name: '${{ secrets.ALT_CACHIX }}'
        # skip pushing to cachix if this is NOT a push to a branch (i.e. it is a PR)
        skipPush: ${{ github.event_name != 'push' }}
        signingKey: '${{ secrets.ALT_CACHIX_SIGNING_KEY }}'

    # run it in serial because we are getting attacked by the OOM killer lol
    - run: nix-build -A client -o client-out

    - run: |
        mkdir -p client-js/bin/
        cp -R client-out/bin/AllActions.jsexe client-js/bin/AllActions.jsexe
        chmod -R u+w client-js
        tar cvzf client-js.tar.gz client-js

    # upload an artefact of the client js so people can avoid building it.
    - uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      with:
        tag_name: '${{ github.ref }}'
        release_name: 'GHCJS Release: ${{ github.ref}}'
        draft: false
        prerelease: false

    - uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      with:
        upload_url: '${{ steps.create_release.outputs.upload_url }}'
        asset_path: ./client-js.tar.gz
        asset_name: client-js.tar.gz
        asset_content_type: application/gzip

    - run: nix-build -A server

  docker-build:
    # only build deployable images on master branch
    # TODO: reinstate once Ubuntu stops OOM'ing the client build
    if: false && (github.event_name == 'push' && github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    env:
      IMG_REF: "docker.pkg.github.com/${GITHUB_REPOSITORY}/carnap:latest"
      # GitHub Actions has a broken default for this
      XDG_RUNTIME_DIR: "${HOME}/run"
    steps:
    - run: 'mkdir -p "${XDG_RUNTIME_DIR}"'
    - run: "echo url: docker://$(echo ${IMG_REF} | envsubst | tr 'A-Z' 'a-z')"
    - uses: actions/checkout@v2
    - uses: cachix/install-nix-action@v12
      with:
        nix_path: nixpkgs=channel:nixos-unstable
    - run: nix-shell -p skopeo --run "skopeo login docker.pkg.github.com -u ${{ github.repository_owner }} -p ${{ secrets.GITHUB_TOKEN }}"
    - uses: cachix/cachix-action@v8
      with:
        name: carnap
        # the docker image artifacts are really big and not terribly useful for deployment
        skipPush: true
        signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
    - run: nix-build -A client
    - run: nix-shell -p skopeo --run "skopeo copy docker-archive:$(nix-build release.nix --arg hasKvm false -A docker --no-out-link) docker://$(echo ${IMG_REF} | envsubst | tr 'A-Z' 'a-z')"

